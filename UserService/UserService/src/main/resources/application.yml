server:
  port: 8081

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/microservices
    username: root
    password: admin
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  application:
    name: USER-SERVICE

#  To import configuration
  config:
    import: optional:configserver:http://localhost:8085

  #Spring security

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://dev-29414653.okta.com/oauth2/default

#      Client configuration
      client:
        registration:
          my-internal-client:
            provider: okta
            authorizationGrantType: client_credentials
            scope: internal
            clientId: 0oacsld71mdiXJCrn5d7
            clientSecret: cpm6_9WDqQjgm7h2ssQ4lyoIRJEK9ScO8aC-PzROcPNRwfEjnF58mhjuRff4HkzC
        provider:
          okta:
            issuerUri: https://dev-29414653.okta.com/oauth2/default




# it will take by default the default one file
# spring.config.import.optional.configserver=http://localhost:8085

#  cloud:
#    config:
#      profile:
#        - prod

# Here directly with this it will use prod application file and name will also be changed
#spring:
#  config:
#    import: configserver:http://localhost:8085
#  profiles:
#    active:
#      - prod/dev







#eureka:
#  instance:
#    prefer-ip-address: true
#  client:
#    fetch-registry: true
#    register-with-eureka: true
#    service-url:
#      defaultZone : http://localhost:8761/eureka


#this configuration is for a service instance that uses Eureka for service registration and discovery. It prefers to use IP addresses for registration and is configured to fetch the registry information from a Eureka server running on http://localhost:8761/eureka. This is a common configuration in microservices environments where Eureka is used for service registration and discovery.



#Actuator configuration
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health

  endpoint:
    health:
      show-details: always


#Resilence4j Circuit breaker configuration

resilience4j:
  circuitbreaker:
    instances:
      ratingHotelBreaker:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED

  #Configuration for RETRY
#Idealy waitDuration should be 2s
  retry:
    instances:
      ratingHotelBreaker:
        maxAttempts: 3
        waitDuration: 5s

#Configuration for RateLimiter
# Here it means in 4 s it will allow only 2 requests

  ratelimiter:
    instances:
      userRateLimiter:
        limitRefreshPeriod: 4s
        limitForPeriod: 2
        timeoutDuration: 2s


# Okta configuration

okta:
  oauth2:
    issuer: https://dev-29414653.okta.com/oauth2/default
    audience: api://default















#Select and ctrl+Q will tell it details





